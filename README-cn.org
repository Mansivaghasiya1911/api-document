
[[README.org][English Readme]]

[[https://github.com/liuanxin/api-document-example][示例项目地址]]

** 说明

维护过项目的人应该都有体会, 如果接口文档是单独编写的(org-mode、markdown、rap 甚至是 word 等), 随着项目周期的推进, 接口文档和真实代码之间的差距会越来越远.

基于 swagger 的一些细节不那么让人如意(比如无法处理 map, swagger-ui 中查看响应说明需要切屏)而出现了此文档收集应用.

** 使用

添加引用
#+BEGIN_SRC xml
<dependency>
    <groupId>com.github.liuanxin</groupId>
    <artifactId>api-document</artifactId>
    <version>0.3.8</version>
</dependency>
#+END_SRC

添加如下配置
#+BEGIN_SRC java
@Configuration
@EnableApiInfo
public class ApiInfoConfig {
    @Bean
    public DocumentCopyright apiCopyright() {
        return new DocumentCopyright("标题", "团队", "版本号", "版权")
                    // 全局的响应说明, 如果在方法上使用 @ApiResponses 注解则以方法上的为准
                    // setGlobalResponse(Arrays.asList(
                    //         new DocumentResponse(400, "请求参数有误"),
                    //         new DocumentResponse(500, "请求异常")
                    // ))
                    // 当某些接口不好标 @ApiIgnore 时(格式: url|method, url 可以使用 * 通配 method 可以忽略)
                    // .setIgnoreUrlSet(Sets.newHashSet("/user*", "/product/info|post"))
                    // 如果设置成 true 则接口会返回空(可以在生产环境中开启), 默认是 false
                    .setOnline(true);
    }
}
#+END_SRC

而后在对应的 controller 层标注相应的注解(只对 @RestController 或 @ResponseBody 相关的类及接口进行文档收集,
如果方法上的返回类型是 List、Set 或 Map 会以 ArrayList、HashSet 及 HashMap 进行处理),
ResponseEntity 会处理其定义的泛型类型(不设置将无法解析)

PS: 可以参考 [[https://github.com/liuanxin/api-document-example][example]] 的全局处理.
泛型请务必使用确切的类型, 如 <String> <User> 等, 如果使用 <T> <Object> 这样的类型将会无法解析.
另外, 当返回值中有 非基础数据类型的数组(User[]) 时也无法实例, 请使用 List<User> 替换.

相关注解如下
#+BEGIN_EXAMPLE
@ApiGroup   标注在类或方法上. 表示当前接口隶属哪个模块. 如果类上和方法上都标了则以方法上的为准
  value     模块. 必须设置, 示例(名称-说明, 如: user-用户, 名称用来生成锚点, 说明用来显示, 以 英文中横线 - 隔开, 说明如果为空则显示成名称)
  index     索引, 越小越靠前. 可以不设置(索引如果一致会使用 说明 排序, 说明如果也一致会使用 name 排序)


@ApiResponses 标注在类或方法上. 用来标注接口的响应码或描述
@ApiResponse  嵌套注解
  code        响应编码, 如 400
  msg         响应说明, 如 参数不正确

示例如下:
@ApiResponses({
    @ApiResponse(code = 400, msg = "请求参数有误"),
    @ApiResponse(code = 500, msg = "请求异常")
})


@ApiMethod  标注在方法上
  title     接口标题, 必须设置
  develop   开发者信息, 可以不设置
  desc      接口详细说明. 可以不设置
  index     索引, 越小越靠前. 可以不设置(索引如果一致会使用 开发者信息 排序, 开发者信息 如果也一致会使用 接口标题 排序)
  commentInReturnExample  返回字段说明是否写在返回示例中. 可以不设置, 默认是 true
  commentInReturnExampleWithLevel 使用层级关系来处理示例中的字段注释, 默认是 true
    为 true  将使用字段的层级关系来处理说明, 泛型请务必使用确切的类型
    为 false 将使用字段顺序来处理说明, 当使用 @JsonPropertyOrder 更改字段顺序 将会有问题
    PS: 字段不是标准的驼峰命名也是会有问题的

@ApiIgnore  标注在类或方法上. 当想要在某个类或接口上忽略收集时, 使用此注释
  value     值如果是 false 则表示不忽略. 类上和方法上都标了则以方法上的为准


@ApiParam   标注在参数上(如果参数是由实体注入的, 则在实体的字段上标注)
  value     参数说明, 必须设置
  name      参数名, 可以不设置, 如果设置了将会无视参数名或字段名
  dataType  数据类型. 可以不设置, 自定义时(比如参数类型是枚举, 但是显示在文档上时可以传 int 时)有用: int、long、float、double、email、url、ipv4
  paramType 参数类型. 可以不设置, Header 或 Query 两种, 默认是 Query, 设置为 Header 表示当前值是放在 header 中传递的
  must      参数是否必须. 可以不设置, 如果标有 @RequestParam(required = true) etc... 则无视此设置
  textarea  参数是否显示成 文本域, 可以不设置, 默认是 false

@ApiParamIgnore 标注在参数上(如果参数是由实体注入的, 则在实体的字段上标注). 如果不希望参数出现在文档中, 使用此注解


@ApiReturn  标注在字段上. 用来说明返回结果
  value     返回说明, 必须设置
  type      返回类型, 自定义(比如字段类型是枚举, 但是显示在文档上时是 int 时)用到
  example   返回示例, 只用在字段是 String 或基础数据类型(包括 BigInteger 和 BigDecimal)上

@ApiReturnIgnore 标注在字段上. 如果不希望返回字段出现在结果文档中, 使用此注解
#+END_EXAMPLE

如果是非 spring boot 项目, 添加如下配置
#+BEGIN_SRC xml
<mvc:resources mapping="/static/**" location="classpath:/static/" />
#+END_SRC
运行项目, 浏览 ~http://ip:port/static/api-info.html~ 查看文档(spring boot 则不需要 /static 二级目录).\\
如果想要直接在文档上测试请求后台接口, 可以浏览 ~http://ip:port/static/api-info-example.html~ 页面

-----

最终效果如下
[[###][https://raw.githubusercontent.com/liuanxin/image/master/api.png]]
-
[[###][https://raw.githubusercontent.com/liuanxin/image/master/api2.png]]
-
[[###][https://raw.githubusercontent.com/liuanxin/image/master/api-example.gif]]
-----
